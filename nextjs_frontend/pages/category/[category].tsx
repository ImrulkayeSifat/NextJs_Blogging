import { AxiosResponse } from 'axios';
import { GetServerSideProps } from 'next';
import Head from 'next/head'
import { useRouter } from 'next/router';
import qs from 'qs';
import React from 'react'
import ArticleList from '../../components/ArticleList';
import Pagination from '../../components/Pagination';
import Tab from '../../components/Tab';
import { fetchArticles, fetchCategories } from '../../http';
import { IArticle, ICategory, ICollectionResponse, IPagination } from '../../types';
import { capitalizeFirstLetter, makeCategory } from '../../utils';

interface IPropType {
  categories: {
      items: ICategory[];
      pagination: IPagination;
  };
  articles: {
      items: IArticle[];
      pagination: IPagination;
  };
  slug: string;
}

const category = ({ categories, articles, slug }: IPropType) => {
  const { page, pageCount } = articles.pagination;
  const router = useRouter();
  const { category: categorySlug } = router.query;
  
  const formattedCategory = () => {
    return capitalizeFirstLetter(makeCategory(slug));
  };
  return (
    <>
      <Head>
        <title>Create Next App {formattedCategory()}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Tab categories={categories} articles={{
        items: []
      }}/>
      <ArticleList articles={articles.items}/>
      <Pagination page={page} pageCount={pageCount} redirectUrl={`/category/${categorySlug}`}/>
    </>
  )
}

export const getServerSideProps: GetServerSideProps = async ({ query }) => {

  const options = {
    populate: ['author.avatar'],
    sort: ['id:desc'],
    filters: {
        category: {
            slug: query.category,
        },
    },
    pagination: {
        page: query.page ? +query.page : 1,
        pageSize: 2,
    },
  };
  const queryString = qs.stringify(options);

  const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> =
        await fetchArticles(queryString);
  const { data: categories}: AxiosResponse<ICollectionResponse<ICategory[]>> =
    await fetchCategories();

  return {
    props: {
        categories: {
            items: categories.data,
            pagination: categories.meta.pagination,
        },
        articles: {
          items: articles.data,
          pagination: articles.meta.pagination,
        },
        slug: query.category,       
    },
  };  
}

export default category